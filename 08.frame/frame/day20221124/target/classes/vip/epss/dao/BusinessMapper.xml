<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace值  接口名称 -->
<mapper namespace="vip.epss.dao.BusinessMapper">
    <!--
        id   对应   接口中的  方法名
        parameterType   对应   方法的传入参数类型
        #{变量名}      实现参数的引用   , 基本类型变量名任意  ， 复合类型不可以
        resultType      对应   方法的返回类类型  ,  方法返回基本类型可以不设定 resultType，如果返回集合，返回类型是集合封装的数据类型
        参数或者返回类型是实体类时，主配置文件设置别名简化长度
        SQL语句  没有  ；   结尾
        public Business selectByPrimaryKey(int id);
    -->
    <select id="selectByPrimaryKey" parameterType="int" resultType="Business">
        select * from business where id=#{value}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="int">
        delete from business where id=#{val}
    </delete>
    <insert id="insertObj" parameterType="Business">
        insert into business (password,businessName) values (#{password},#{businessName})
    </insert>
    <update id="updateObj" parameterType="Business">
        update business set businessName=#{businessName},password=#{password} where id=#{id}
    </update>
    <select id="selectAll" resultType="Business">
        select * from business
    </select>
<!--SQL语句是文本形式,注意转义符的问题以及字符串拼接的问题-->
<!--    <select id="selectByCondition" resultType="Business">-->
<!--        select * from business where businessName like concat('%',${keyword},'%') and id &lt; 8 and id &gt; 6-->
<!--    </select>-->
    <select id="countNum" parameterType="BusinessVO" resultType="int">
        select count(id) from business  where id <![CDATA[ #{con} ]]>  #{id} and businessName like concat('%',#{businessName},'%')
    </select>

    <select id="selectByCondition" parameterType="BusinessVO" resultType="Business">
        select * from business where id <![CDATA[ #{con} ]]> #{id} and businessName like concat('%',#{businessName},'%')
    </select>

</mapper>

        <!--
        String sql = "select * from business where id=?";
        ps.preparestatement(sql);
        ps.setInt(1,1018);
        rs  = ps.executeQuery();
        while(rs.next())
        {
            ............
        }
        -->